%h2 번들러를 사용하는 애플리케이션 배포
.contents
  .bullet
    .description
      번들러를 사용하는 앱을 배포하기전에 <code>Gemfile</code>과
      <code>Gemfile.lock</code>를 버전관리하세요. 하지만 <code>.bundle</code>는
      각 머신에 따라 지정되므로 재외하셔야 합니다.
    :code
      $ echo ".bundle\n" >> .gitignore
      $ git add Gemfile Gemfile.lock .gitignore
      $ git commit -m "Add Bundler support"
    .notes
      하셨다면 수동 또는 자동으로 배포가 가능합니다.

  .bullet
    .description
      %h3 수동 배포
      최신 코드로 갱신한 후 배포 스크립트에서 번들을
      <code>vendor/bundle</code> 디렉토리에 설치하고
      모든 의존성이 만족하는지를 확인합니다.
    :code
      $ bundle install --deployment
    .notes
      %p
        평상시처럼 어플리케이션 서버를 기동하면 개발 환경과
        완전히 동일한 번들러 환경을 사용합니다.

      %p
        <code>bundle package</code>를 실행했다면 자동으로
        케쉬된 젬들이 사용됩니다.

      = link_to '자세한 내용은: Packing', './bundle_package.html'

  .bullet
    %h3 카피스트라노로 하는 자동 배포
    .description
      번들러 카피스트라노 테스크에서 풀(pull)하려면 이 코드를
      <code>deploy.rb</code>에 추가하시기만 하면 됩니다.
    :code
      # lang: ruby
      require 'bundler/capistrano'
    .notes
      끝입니다! 이제 <code>cap deploy</code>를 실행하시면 자동으로 리모트 서버에서
      배포용 옵션과 함께 <code>bundle install</code>를 실행하게 됩니다.
      카피스트라노 테스크에서 변경할수 있는 옵션의 목록은 <code>cap -e bundle:install</code>
      로 보실 수 있습니다.

  .bullet
    .description
      %h3 Vlad로 하는 자동 배포
      기본 Vlad 테스크로 할 수 있습니다. 이 기능을 활성화하려면 Vlad의 <code>deploy.rb</code>
      에 다음 줄을 추가하세요.
    :code
      # lang: ruby
      require 'bundler/vlad'
    .notes
      넣으시면 <code>vlad:bundle:install</code> 테스크가 사용가능하게 됩니다.
      배포의 일부분으로 동작하는지 확인하세요. 예를들면 이런 식입니다.
    :code
      # lang: ruby
      task "vlad:deploy" => %w[
        vlad:update vlad:bundle:install vlad:start_app vlad:cleanup
      ]

  .bullet
    .description
      %h3 배포 이후
      번들안의 젬들의 실행파일을 실행할 때 <code>bundle exec</code>를
      사용하는지 확인하세요.
    :code
      $ bundle exec rake db:setup
    .notes
      또는 <code>--binstubs</code> 옵션을 사용해 인스톨 명령이 <code>bundle exec</code>
      대신 사용가능한 실행파일 바이너리를 생성하도록 하세요.
    = link_to '자세한 내용은: 실행파일', './man/bundle-exec.1.html'

  .bullet
    .description
      %h3 Heroku
      Heroku에 배포할때 Gemfile만 있다면 번들러는 자동으로 실행됩니다. Gemfile.lock파일을
      체크인했다면 Heroku는 <code>`bundle install --deployment`</code>를 실행 합니다.
      <code>--without</code> 옵션을 사용해 특정 그룹을 재외하고 싶다면 <code>`heroku config`</code>
      를 사용하셔야 합니다.
    :code
      $ heroku config:add BUNDLE_WITHOUT="test development" --app app_name
    = link_to 'Heroku Bundler Documentation', 'http://docs.heroku.com/bundler'

  %h2#deploying-your-application
    어플리케이션 배포하기

  .bullet
    .description
      <code>bundle install</code>을 실행할 때 번들러는 (기본값으로) 젬들을 시스템 젬 저장소에
      설치합니다. 이 말은 <code>gem list</code>에서 볼 수 있다는 의미입니다. 추가적으로
      여러 어플리케이션을 개발중이라면 각각의 어플리케이션에서 다운로드해 인스톨 할 필요가
      없습니다. 이렇게하면 개발할 때는 편하지만, 배포할때는 다소 문제가 될 수 있습니다.

    %p.description
      배포 시나리오에서 유닉스 유저는 시스템 영역에 젬을 인스톨할 권한이 없을 것입니다.
      배포하는 유저에게 권한이 있(거나 <code>sudo</code>를 사용한)다 하더라도 어플리케이션을
      실행하는 유저에게는 권한이 없을 수도 있습니다. 예를들어 패신저는 루비 서브 프로세스를
      제한된 유저인 <code>nobody</code>로 실행합니다.
      배포 환경에서는 환경을 격리하는데 보다 힘을 씁니다.(어떤 서드파티 의존성이 바뀌었을때
      배포 중에 <code>bundle install</code>이 느려진다고 해도 말이죠.)

    %p.description
      결과적으로 번들러를 <code>--deployment</code> 플레그와 함께 사용하면 배포환경에서 번들러를
      사용하는 최선의 사례을 캡슐화합니다. 이 사례들은 번들러의 개발 기간 동안 받은 중요한
      피드백뿐만 아니라, 버그 리포트들을 기반으로합니다. 버그리포트의 대부분은 가장 적합한
      배포를위한 번들러를 구성하는 방법에 대한 오해를 반영하고 있습니다.
      <code>--deployment</code> 플래그는 기본적으로 다음을 추가합니다.

    .description
      %ul
        %li
          시스템에 젬을 설치하는 대신 번들러는 어플리케이션안의 <code>vendor/bundle</code>에
          설치할 것입니다. 어플리케이션 안에 젬들을 시작하면 번들러는
          (<code>Bundler.setup</code>과 <code>Bundler.require</code>를 사용해) 투명하게 이
          위치를 기억할 것 입니다.
        %li
          번들러는 시스템에 설치된 젬이 이미 있다고 해도 사용하지 않을 것 입니다.
        %li
          <code>bundle pack</code>을 실행한 적이 있고 <code>vendor/cache</code>디렉토리가
          체크인 되어있고 git 젬을 가지고 있지 않다면, 번들러는 번들을 설치할 때 인터넷에
          접속하지 않을 것 입니다.
        %li
          번들러는 <code>Gemfile.lock</code> 스냅샷을 요청하고 없다면 실패합니다.
        %li
          번들러는 <code>Gemfile</code>가 오래된 버전이라 하더래도 <code>Gemfile.lock</code>을
          갱신하지 않습니다.

    %p.description
      카피스트라노를 사용하시고 계신다면 <code>vendor/bundle</code>를
      <code>shared/vendor_bundle</code>의 심볼릭 링크로 만드실 수 있습니다. 이렇게 하면 번들러는
      배포판 사이에 설치된 젬들을 공유해 (변경되지 않았다면 배포 과정을 단축하면서) 다른
      어플리케이션과 격리되는 장점은 유지 할 수 있습니다.

    %p.description
      기본적으로 번들 디렉토리 <code>vendor/bundle</code> 입니다. 그리고, 배포 프로세스의 일부로
      번들을 설치하면 어플리케이션을 체크아웃한 같은 유닉스 유저들도 어플리케이션에서 필요한
      서드파티 코드들이 설치 되어 있는 것을 확인 할 수 있습니다. 이 말은 페신져(나 유니콘)이
      어플리케이션을 볼 수 있다면, 의존성도 볼 수 있다는 이야기입니다.

    %p.description
      <code>--deployment</code>플래그는 실제로 프로덕션에 코드를 반영하기 전에 (개발과 스테이징
      환경에서) 테스트가 끝난 최신의 <code>Gemfile.lock</code>가 필요합니다. 배포하기 전에
      <code>bundle check</code>을 실행해 <code>Gemfile.lock</code>이 최신상태인지 확인할 수
      있습니다. 마지막으로 <code>Gemfile</code>을 변경한 이후 <code>bundle install</code>를 실행하고
      성공적으로 어플리케이션을 부트(하거나, 테스트를 실행)했다면 항상 최신 상태임을 주의하세요.
