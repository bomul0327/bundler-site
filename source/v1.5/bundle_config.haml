%h2 bundle config

.contents
  .bullet
    .description
      설정값을 검색하거나 설정
    :code
      $ bundle config [NAME [VALUE]] [--local] [--global] [--delete]
    .notes
      %p
        옵션:
      %p
        <code>--local</code>: 로컬 설정 읽기/쓰기
      %p
        <code>--global</code>: 글로벌 설정 읽기/쓰기
      %p
        <code>--delete</code>: <code>NAME</code> 값 제거
    .description
      %p
        설정값을 검색하거나 설정합니다. 하나의 파라메터만 주어지면 값을 검색합니다.
        두개의 파라메터가 주어지면 기존의 값을 주어진 값으로 대체합니다.
      %p
        기본값으로 설정 값들을 설정하면 머신의 모든 프로젝트에 설정됩니다.
      %p
        글로벌 설정이 로컬 설정에의해 대체된다면 이 명령어는 현재 값뿐만 아니라
        대체값과 값들이 어디에 지정되었는지를 보여줍니다.

  .bullet#config
    .description
      번들 설정을 읽음.
    .how
      :code
        $ bundle config
      .notes
        파라메터없이 <code>bundle config</code>를 실행하면 현재 번들을 위한
        모든 번들러 설정과 어디에서 설정되었는지를 출력합니다.

  .bullet#get
    .description
      <code>NAME</code>변수의 번들 설정을 읽음.
      Get your bundle configuration for <code>NAME</code> variable.
    .how
      :code
        $ bundle config NAME
      .notes
        <code>NAME</code>의 설정된 값과 어디에서 설정하였는지를 출력합니다.
        로컬과 글로벌 모두 출력합니다.

  .bullet#set
    .description
      번들 설정 변수 <code>NAME</code>에 <code>VALUE</code>를 씀.
    .how
      :code
        $ bundle config NAME VALUE
      .notes
        글로벌 설정의 경우라면 현제 유저로서 설정되는 모든 번들에 대해
        <code>NAME</code>에 <code>VALUE</code>를 설정합니다. 설정은
        <code>~/.bundle/config</code>에 저장됩니다. <code>NAME</code>이
        이미 설정되어 있다면 경고와함께 <code>NAME</code>을 덮어씁니다.

  .bullet#global
    .description
      글로벌/유저 번들 설정 변수 <code>NAME</code>에 <code>VALUE</code>를 씀.
    .how
      :code
        $ bundle config --global NAME VALUE
      .notes
        위의 명령어와 같은 동작을 합니다.

  .bullet#local
    .description
      지역 번들 설정 변수 <code>NAME</code>에 <code>VALUE</code>를 씀.
    .how
      :code
        $ bundle config --local NAME VALUE
      .notes
        위의 명령어와 같은 동작을 하지만 로컬 어플리케이션용 입니다.
        설정은 <code>app/.bundle/config</code>에 저장됩니다.

  .bullet#delete
    .description
      글로벌과 로컬에서 <code>NAME</code>의 설정을 삭제
    .how
      :code
        $ bundle config --delete NAME
      .notes
        글로벌과 로컬에서 <code>NAME</code>의 설정 값을 삭제합니다. --global이나 --local플레그와는 호환되지 않습니다.

%h2 빌드 옵션
.contents
  .bullet#build_options
    .description
      %p
        <code>bundle config</code>는 특정 젬을 설치할 때마다 인스톨러에 플래그를
        넘겨주는 용도로도 사용할 수 있습니다.

      %p
        매우 일반적인 예로 <code>mysql</code>젬은 스노우 레오파드에서 <code>gem
        install</code>을 할 때 <code>mysql_config</code> 실행파일을 찾기 위한 설정
        플래그를 필요로합니다.

      .how
        :code
          $ gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config

      %p
        <code>mysql_config</code>의 실행파일의 구체적인 위치가 머신마다 다를 수
        있으므로 각 머신마다 이 플래그를 지정시킬 수 있습니다.

      .how
        :code
          $ bundle config build.mysql --with-mysql-config=/usr/local/mysql/bin/mysql_config
      %p
        이 명령어를 실행하면 <code>mysql</code>젬을 설치해야 할때마다 지정한
        플레그를 함께 넘겨 줍니다.


%h2 설정키
.contents
  .bullet#configuration_keys
    .description
      %p
        번들러에서의 설정키는 두가지 양식이 있습니다. 표준 양식과 환경 변수
        양식입니다.

      %p
        예를들어, <code>bundle install</code>에 <code>--without</code> 플레그를
        넘겨주어 번들러가 <code>Gemfile</code>의 특정그룹을 설치하는 것을 막는
        경우 번들러는 이 값을 <code>app/.bundle/config</code>안에 남겨두어
        <code>Bundler.setup</code>이 <code>Gemfile</code>에서 설치되지 않은 젬을
        찾으려 하지 않도록 합니다. 덤으로 <code>bundle install</code>를 또 실행
        할때 이 설정을 기억해 두었다가 그 그룹들을 생략 합니다.

      %p
        이 설정의 표준 양식은 <code>"without"</code>입니다. 표준 양식에서 환경
        변수 양식으로 변경하려면 대문자로 바꾸고 앞에 <code>BUNDLE_</code>을
        붙이세요. <code>"without"</code>의 환경 변수 양식은
        <code>BUNDLE_WITHOUT</code>입니다.

%h2 가능한 키의 목록
.contents
  .bullet#available_keys
    .description
      %p
        밑의 내용은 모든 설정 키와 기능입니다.
        <code>bundle install</code>을 실행하면 작업에 대해 더 많이 배울 수 있습니다.
      %ul
        %li
          <code>path</code> (<code>BUNDLE_PATH</code>): 젬을 설치할 디스크에서의
          위치입니다. 기본값은 개발환경에서는 <code>$GEM_HOME</code>,
          <code>--deployment</code>가 사용되었다면 <code>vendor/bundle</code>입니다.
        %li
          <code>frozen</code> (<code>BUNDLE_FROZEN</code>): <code>Gemfile</code>의
          변경을 금지합니다. <code>--deployment</code>가 사용되었다면 기본 값은
          <code>true</code>입니다.
        %li
          <code>without</code> (<code>BUNDLE_WITHOUT</code>): 설치하지 말아야 할
          그룹의 목록입니다. <code>:</code>으로 구분됩니다.
        %li
          <code>bin</code> (<code>BUNDLE_BIN</code>): 번들안의 젬에서 실행파일을
          특정 디렉토리에 설치합니다. 기본 값은 <code>false</code>입니다.
        %li
          <code>gemfile</code> (<code>BUNDLE_GEMFILE</code>): 번들러가
          <code>Gemfile</code>로 사용할 파일의 이름입니다. 이 파일의 위치는
          프로젝트의 루트도 설정합니다. 프로젝트의 루트는 무엇보다도
          <code>Gemfile</code>의 상대 경로를 확인하는 데 사용됩니다.

      %p
        일반적으로 해당 플레그를 <code>bundle install</code> 명령어에 사용함으로써
        애플리케이션 별 설정을 해야합니다.

      %p
        환경 변수나 <code>bundle config</code> 어느쪽이든 좀더 상황에 맞는 쪽을 골라
        글로벌하게 설정할 수 있습니다. 양쪽 다 사용한다면 환경 변수가 글로벌 셋팅보다
        우선됩니다.

%h2 로컬 깃 저장소
.contents
  .bullet#local_git_repos
    .description
      %p
        번들러는 리모트 버전이아닌 로컬 깃 저장소로 작업하게 할수도 있습니다.
        이렇게 하려면 로컬 우선으로 설정하실 필요가 있습니다.

      :code
        $ bundle config local.GEM_NAME /path/to/local/git/repository

      %p
        예를 들어 로컬 Rack 저장소를 사용하시려면 이렇게 하시면 됩니다.

      :code
        $ bundle config local.rack ~/Work/git/rack

      %p
        이제 리모드 깃 저장소에서 체크아웃 하는 대신, 로컬 저장소가 우선됩니다.
        소스 패스와 비슷하게 로컬 깃 저장소가 변경 될 때 마다 변경 내용은
        자동으로 번들러가 반영해줍니다. 이 말은 로컬 깃 저장소의 커밋은
        <code>Gemfile.lock</code>안의 리비전을 로컬 깃 저장소의 리비전으로
        갱신한다는 뜻입니다. 이 것은 깃 서브모듈의 사용할때 처럼 주의가
        필요합니다. 리모트에 푸쉬하기 전에 로컬에 있는게 전부 푸쉬돼어 있는지
        확인하셔야 합니다. 그렇지 않으면 로컬 머신에만 있는 커밋을 가르키게
        됩니다.

      %p
        번들러는 잘못된 참조로 작동하지 않는지 확인하기 위해 여러번 체크합니다.
        특히 이 기능을 사용하기 위해서는 <code>Gemfile</code>에서 브랜치를
        적도록 합니다. <code>Gemfile</code>안에 지정되어있는 브랜치와 로컬 저장소의
        현재 브랜치가 맞지 않으면 번들러는 실행을 정지합니다. 이 것은 항상
        정확한 브랜치에 대해 작업하고있는지 확인하고 의도치않게 다른 브랜치를
        보는 것을 예방합니다.

      %p
        마지막으로 번들러는 <code>Gemfile.lock</code>안의 맞는 리비전이
        로컬 깃 저장소에 있는지도 확인합니다. 이렇게 함으로써 번들러는
        리모트의 마지막 변경들을 가져오도록 합니다.

%h2 젬 소스 미러
.contents
  .bullet#gem-source-mirrors
    .description
      %p
        환경이 <code>mirror.URL</code>설정 옵션에 미러의 주소를 설정해
        rubygems.org서버의 로컬 미러를 가지고 있다면 그 시점에서 번들러는
        젬들과 젬스팩들을 Gemfile안에 있는 소스가아닌 미러에서 다운로드
        합니다.

      :code
        $ bundle config mirror.https://rubygems.org https://localgems.lan
          <code>--deployment</code> is used.
